#BlueJ class context
comment0.target=List
comment0.text=\n\ This\ is\ the\ list\ class\ that\ extends\ the\ LinkedListException\n\ this\ class\ also\ has\ a\ node\ class.\ The\ list\ class\ has\ operations\n\ to\ remove,\ append,\ insert,\ delete\ and\ to\ find\ if\ it\ is\ empty.\n\n\ @author\ Iakjot\ Kaur\ \n\ @version\ May\ 19th,\ 2020\n
comment1.params=next\ index
comment1.target=void\ insert(java.lang.Object,\ int)
comment1.text=\n\ This\ method\ is\ to\ insert\ the\ object\ with\ a\ certain\ index.\n\ \n\ I\ made\ sure\ the\ invarients\ were\ followed\ and\ made\ a\ new\ node\n\ and\ stored\ the\ passed\ in\ one\ and\ used\ it\ to\ make\ a\ new\ node.\n\n\ @param\:\ object,\ int\n\ *return\:\ none\n
comment2.params=next
comment2.target=void\ append(java.lang.Object)
comment2.text=\n\ This\ method\ is\ to\ add\ the\ object\ to\ the\ end.\n\ \n\ I\ made\ sure\ the\ invarients\ are\ followed\ and\ then\ made\ a\ \n\ temp\ node\ and\ then\ added\ it\ to\ the\ end\ of\ the\ list,\ if\ it\ was\ available.\n\n\ @param\:\ object\n\ *return\:\ none\n
comment3.params=index
comment3.target=java.lang.Object\ remove(int)
comment3.text=\n\ This\ method\ is\ to\ remove\ the\ object\ according\ to\ the\ index.\n\ \n\ I\ made\ the\ current\ object\ null\ and\ used\ it\ to\ store\ it\ to\ the\ \n\ next\ one,\ and\ I\ made\ sure\ all\ the\ invarients\ are\ followed,\n\ if\ yes,\ then\ I\ i\ removed\ the\ object\ according\ to\ the\ index\n\ being\ passed\ and\ then\ returned\ it.\n\n\ @param\:\ index\n\ *return\:\ Object\n
comment4.params=
comment4.target=int\ size()
comment4.text=\n\ This\ method\ is\ to\ get\ the\ size\ of\ the\ list.\n\ \n\ I\ started\ with\ the\ head\ and\ then\ went\ through\ it\ while\ it's\ not\ null\n\ and\ counted\ it\ with\ a\ counter.\n\n\ @param\:\ none\n\ *return\:\ int\n
comment5.params=target
comment5.target=int\ indexOf(java.lang.Object)
comment5.text=\n\ This\ method\ is\ to\ get\ the\ index\ of\ the\ object\ you\ want.\n\ \n\ I\ started\ with\ the\ head\ and\ then\ if\ the\ head\ was\ the\ target,\ i\ returned\n\ that\ and\ if\ not,\ I\ made\ sure\ if\ it's\ not\ the\ right\ number\ I\ kept\ going\n\ and\ returned\ the\ right\ number.\n\n\ @param\:\ object\n\ *return\:\ int\n
comment6.params=index
comment6.target=void\ delete(int)
comment6.text=\n\ This\ method\ is\ to\ delete\ the\ object\ that\ you\ want\ based\ off\ of\ the\ index\n\ \n\ I\ made\ sure\ the\ invairents\ were\ followed\ and\ then\ redirected\ the\ \n\ node\ to\ the\ next\ one.\n\n\ @param\:\ int\n\ *return\:\ none\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ This\ method\ is\ to\ print\ out\ the\ list.\n\ \n\ I\ enumerated\ through\ my\ list\ and\ returned\ the\ list.\n\n\ @param\:\ none\n\ *return\:\ String\n
comment8.params=
comment8.target=boolean\ isEmpty()
comment8.text=\n\ This\ method\ is\ to\ check\ if\ the\ list\ is\ empty.\n\ \n\ if\ the\ head\ is\ empty\ then\ the\ entire\ list\ is,\ if\ not\ then\ \n\ it\ is\ not\ empty.\n\n\ @param\:\ none\n\ *return\:\ boolean\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
numComments=10
